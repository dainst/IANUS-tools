# -*- coding: utf8 -*-
# Filename: checkdigit.py
#
########################################################################
# This creates a checkdigit using the Verhoeff algorithm
# Martina Trognitz (martina.trognitz@dainst.de)
#
# Explanation of Verhoeff algorithm
# http://en.wikipedia.org/wiki/Verhoeff_algorithm
# 
# Verhoeff algorithm for alphanumerical characters
# http://tumblr.mwgamera.name/post/7395866808/alphanumeric-verhoeff-algorithm
#
# This code is based on the C implementation from mwgamera:
# https://gist.github.com/mwgamera/1073024
########################################################################

import sys

#multiplication table d, with D18
d18 = [
[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],
[ 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17, 0,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,18],
[ 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17, 0, 1,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,18,19],
[ 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17, 0, 1, 2,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,18,19,20],
[ 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17, 0, 1, 2, 3,22,23,24,25,26,27,28,29,30,31,32,33,34,35,18,19,20,21],
[ 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17, 0, 1, 2, 3, 4,23,24,25,26,27,28,29,30,31,32,33,34,35,18,19,20,21,22],
[ 6, 7, 8, 9,10,11,12,13,14,15,16,17, 0, 1, 2, 3, 4, 5,24,25,26,27,28,29,30,31,32,33,34,35,18,19,20,21,22,23],
[ 7, 8, 9,10,11,12,13,14,15,16,17, 0, 1, 2, 3, 4, 5, 6,25,26,27,28,29,30,31,32,33,34,35,18,19,20,21,22,23,24],
[ 8, 9,10,11,12,13,14,15,16,17, 0, 1, 2, 3, 4, 5, 6, 7,26,27,28,29,30,31,32,33,34,35,18,19,20,21,22,23,24,25],
[ 9,10,11,12,13,14,15,16,17, 0, 1, 2, 3, 4, 5, 6, 7, 8,27,28,29,30,31,32,33,34,35,18,19,20,21,22,23,24,25,26],
[10,11,12,13,14,15,16,17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,28,29,30,31,32,33,34,35,18,19,20,21,22,23,24,25,26,27],
[11,12,13,14,15,16,17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,29,30,31,32,33,34,35,18,19,20,21,22,23,24,25,26,27,28],
[12,13,14,15,16,17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,30,31,32,33,34,35,18,19,20,21,22,23,24,25,26,27,28,29],
[13,14,15,16,17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,31,32,33,34,35,18,19,20,21,22,23,24,25,26,27,28,29,30],
[14,15,16,17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,32,33,34,35,18,19,20,21,22,23,24,25,26,27,28,29,30,31],
[15,16,17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,33,34,35,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],
[16,17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,34,35,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],
[17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,35,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],
[18,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19, 0,17,16,15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
[19,18,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20, 1, 0,17,16,15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2],
[20,19,18,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21, 2, 1, 0,17,16,15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3],
[21,20,19,18,35,34,33,32,31,30,29,28,27,26,25,24,23,22, 3, 2, 1, 0,17,16,15,14,13,12,11,10, 9, 8, 7, 6, 5, 4],
[22,21,20,19,18,35,34,33,32,31,30,29,28,27,26,25,24,23, 4, 3, 2, 1, 0,17,16,15,14,13,12,11,10, 9, 8, 7, 6, 5],
[23,22,21,20,19,18,35,34,33,32,31,30,29,28,27,26,25,24, 5, 4, 3, 2, 1, 0,17,16,15,14,13,12,11,10, 9, 8, 7, 6],
[24,23,22,21,20,19,18,35,34,33,32,31,30,29,28,27,26,25, 6, 5, 4, 3, 2, 1, 0,17,16,15,14,13,12,11,10, 9, 8, 7],
[25,24,23,22,21,20,19,18,35,34,33,32,31,30,29,28,27,26, 7, 6, 5, 4, 3, 2, 1, 0,17,16,15,14,13,12,11,10, 9, 8],
[26,25,24,23,22,21,20,19,18,35,34,33,32,31,30,29,28,27, 8, 7, 6, 5, 4, 3, 2, 1, 0,17,16,15,14,13,12,11,10, 9],
[27,26,25,24,23,22,21,20,19,18,35,34,33,32,31,30,29,28, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,17,16,15,14,13,12,11,10],
[28,27,26,25,24,23,22,21,20,19,18,35,34,33,32,31,30,29,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,17,16,15,14,13,12,11],
[29,28,27,26,25,24,23,22,21,20,19,18,35,34,33,32,31,30,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,17,16,15,14,13,12],
[30,29,28,27,26,25,24,23,22,21,20,19,18,35,34,33,32,31,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,17,16,15,14,13],
[31,30,29,28,27,26,25,24,23,22,21,20,19,18,35,34,33,32,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,17,16,15,14],
[32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,35,34,33,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,17,16,15],
[33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,35,34,15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,17,16],
[34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,35,16,15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,17],
[35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
]

#inverse table for D18
d18_inv = [
0,17,16,15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 
18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]

#permutation table
perT = [
29,0,32,11,35,20,7,27,2,4,19,28,30,1,5,12,3,9,16,
22,6,33,8,24,26,21,14,10,34,31,15,25,17,13,23,18
]

def permutation(value, i):
# Apply n-th composition of permutation
    i = i % 600
    while (i>0):
        value = perT[value]
        i -= 1
    return value

#dictionary to look up integer values for string characters
ascii2int = {
'a':10, 'b':11, 'c':12, 'd':13, 'e':14, 'f':15, 'g':16, 'h':17, 
'i':18, 'j':19, 'k':20, 'l':21, 'm':22, 'n':23, 'o':24, 'p':25, 
'q':26, 'r':27, 's':28, 't':29, 'u':30, 'v':31, 'w':32, 'x':33, 
'y':34, 'z':35}

#inverse dictionary to look up ascii characters for integers
int2ascii = {
10:'a', 11:'b', 12:'c', 13:'d', 14:'e', 15:'f', 16:'g', 17:'h', 
18:'i', 19:'j', 20:'k', 21:'l', 22:'m', 23:'n', 24:'o', 25:'p', 
26:'q', 27:'r', 28:'s', 29:'t', 30:'u', 31:'v', 32:'w', 33:'x', 
34:'y', 35:'z'}

def string2value(char):
    if char.isdigit():
        return int(char)
    else:
        char = ascii2int[char]
        return int(char)

class CheckDigit:
    def __init__(self, string, strlen=17):
        self.string = string.lower()
        self.strlen= strlen
        if len(self.string) == self.strlen-1:
            self.checkdigit = self.createDigit()
        elif len(self.string) == self.strlen:
            pass
        else:
            #TODO Methode finden, wie man das dann als Fehler weitergeben kann
            print "The string is too long or to short. Length should be "+str(strlen-1)+" or "+str(strlen)+" characters.\nLength now is: "+str(len(self.string))
            sys.exit()

    def reverseString(self, tempString):
        length = len(tempString)
        revString = ''
        while length > 0:
            revString += tempString[length-1]
            length -=1
        return revString

    def createDigit(self):
        if len(self.string) == self.strlen-1:
            tempString = self.string+'0'
            tempString = self.reverseString(tempString)
            c = 0
            i = 0
            for char in tempString:
                value = string2value(char)
                c = d18[c][permutation(value, i)]
                i += 1
            c = d18_inv[c]
            if c <= 9:
                c= str(c)
            else:
                c = int2ascii[c]
            return c
        return "No digit created"
        #TODO besser; kann man sich die stringlänge sparen?
        
        
    def checkDigit(self):
        if len(self.string) == self.strlen:
            tempString = self.reverseString(self.string)
            c = 0
            i = 0
            lenght = self.strlen
            for char in tempString:
                value = string2value(char)
                c = d18[c][permutation(value, i)]
                i += 1
                print "value + c: "+char+str(c)
            if c == 0:
                return True
            else:
                return False
                #TODO Möglichkeit geben das richtige c auszugeben
        return "String is longer or shorter than expected\n"

    def strpr(self):
        return self.string  

if __name__=="__main__":
#    print str(d18[0][1])
#    print str(d18_inv[d18[0][1]])
    
    teststring = CheckDigit('1013149000111000')
    print teststring.createDigit()
    print teststring.strpr()
    print teststring.checkDigit()    
